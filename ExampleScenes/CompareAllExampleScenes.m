%%% RenderToolbox3 Copyright (c) 2012 The RenderToolbox3 Team.
%%% About Us://github.com/DavidBrainard/RenderToolbox3/wiki/About-Us
%%% RenderToolbox3 is released under the MIT License.  See LICENSE.txt.
%
% Compare ExampleScenes/ outputs that were generated at different times.
%   @param outputRootA base path where to find data set A
%   @param outputRootB base path where to find data set B
%   @param filterExpression regular expression for filtering comparisons
%   @param visualize whether to plot renderings and comparisons
%
% @details
% Finds 2 sets of rendering outputs: set A includes output data located
% under the given @a outputRootA, set B includes output data located under
% @a outputRootB.  Attempts to match up data files from both sets that were
% generated by the same rendering script, as determined by the names of
% data subfolders.  For each matched pair of outputs, loads multispectral
% data and computes the difference of multispectral images, A minus B.
%
% @details
% By default, compares all data files found in @a outputRootA, and @a
% outputRootB.  If @a filterExpression is provided, it must be a regular
% expression used to match file names.  Only data files that match this
% expression will be compared.
%
% @details
% If @a visualize is greater than 0 (the default), plots a grand summary
% of all matched output pairs.  The summary shows the name of each pair,
% and the minimuim and maximum difference between multispectral pixel
% components (A minus B).
%
% @details
% If @a visualize is greater than 1, makes a detailed figure for each
% matched pair.  Each detailed figure shows an sRGB representation of the
% rendering from A set, the B set, and the difference between the sets (A
% minus B).  The plot also shows a histogram of the differences between
% multispectral pixel components (A minus B).
%
% @details
% Returns a struct array of info about each matched pair, including file
% names and differneces between multispectral images (A minus
% B).
%
% @details
% Also returns a cell array of paths for files in set A that did not match
% any of the files in set B.  Likewise, returns a cell array of paths for
% files in set B that did not match any of the files in set A.
%
% @details
% Usage:
%   [matchInfo, unmatchedA, unmatchedB] = CompareAllExampleScenes(outputRootA, outputRootB, filterExpression, visualize)
%
% @ingroup ExampleScenes
function [matchInfo, unmatchedA, unmatchedB] = CompareAllExampleScenes(outputRootA, outputRootB, filterExpression, visualize)

if nargin < 3 || isempty(filterExpression)
    filterExpression = '';
end

if nargin < 4 || isempty(visualize)
    visualize = 1;
end

matchInfo = [];
unmatchedA = {};
unmatchedB = {};

% find .mat files for sets A and B
fileFilter = [filterExpression '[^\.]+\.mat'];
filesA = FindFiles(outputRootA, fileFilter);
filesB = FindFiles(outputRootB, fileFilter);

if isempty(filesA)
    fprintf('Found no files for set A in: %s\n', outputRootA);
    return;
end

if isempty(filesB)
    fprintf('Found no files for set B in: %s\n', outputRootB);
    return;
end

% strip out the known root from each file path
%   get relative name that can be compared between sets A and B
[relativeA, imageA, scriptA, rendererA] = ...
    scanDataPaths(filesA, outputRootA);
[relativeB, imageB, scriptB, rendererB] = ...
    scanDataPaths(filesB, outputRootB);

% report unmatched files
[setMatch, indexA, indexB] = intersect(relativeA, relativeB, 'stable');
filesMatched = filesA(indexA);
unmatchedA = setdiff(filesA, filesMatched);
unmatchedB = setdiff(filesB, filesMatched);

% allocate an info struct for image comparisons
matchInfo = struct( ...
    'fileA', filesA(indexA), ...
    'fileB', filesB(indexB), ...
    'outputRootA', outputRootA, ...
    'outputRootB', outputRootB, ...
    'relativeA', relativeA, ...
    'relativeB', relativeB, ...
    'imageA', imageA, ...
    'imageB', imageB, ...
    'scriptA', scriptA, ...
    'scriptB', scriptB, ...
    'samplingA', [], ...
    'samplingB', [], ...
    'maxDiff', nan, ...
    'minDiff', nan, ...
    'diffHistCenters', [], ...
    'diffHistCounts', [], ...
    'error', '');

% any comparisons to make?
nMatches = numel(matchInfo);
if nMatches > 0
    fprintf('Comparing %d matched pairs.\n', nMatches);
else
    fprintf('Found no matched pairs.\n');
    return;
end

% compare matched images!
nHistBins = 30;
for ii = 1:nMatches
    % load rendering A
    dataA = load(matchInfo(ii).fileA);
    if ~isfield(dataA, 'multispectralImage')
        matchInfo(ii).error = ...
            sprintf('No multispectral image found in %s', ...
            matchInfo(ii).fileA);
        continue;
    end
    multispectralA = dataA.multispectralImage;
    
    % load rendering B
    dataB = load(matchInfo(ii).fileB);
    if ~isfield(dataB, 'multispectralImage')
        matchInfo(ii).error = ...
            spritnf('No multispectral image found in %s', ...
            matchInfo(ii).fileB);
        continue;
    end
    multispectralB = dataB.multispectralImage;
    
    % check multispectral image dimensions
    if ~isequal(size(multispectralA), size(multispectralB))
        matchInfo(ii).error = ...
            sprintf('Image A[%s] is not the same size as image B[%s].', ...
            num2str(size(multispectralA)), num2str(size(multispectralB)));
        continue;
    end
    
    % check spectral sampling
    matchInfo(ii).samplingA = dataA.S;
    matchInfo(ii).samplingB = dataB.S;
    if ~isequal(dataA.S, dataB.S)
        matchInfo(ii).error = ...
            sprintf('Spectral sampling A[%s] is not the same as B[%s].', ...
            num2str(dataA.S), num2str(dataB.S));
        continue;
    end
    
    % compute the difference image
    multispectralDifference = multispectralA - multispectralB;
    matchInfo(ii).maxDiff = max(multispectralDifference(:));
    matchInfo(ii).minDiff = min(multispectralDifference(:));
    [histCounts, histCenters] = hist(multispectralDifference(:), nHistBins);
    matchInfo(ii).diffHistCounts = histCounts;
    matchInfo(ii).diffHistCenters = histCenters;
    
    % plot difference image?
    if visualize > 1
        showDifferenceImage(matchInfo(ii), ...
            multispectralA, multispectralB, multispectralDifference);
    end
end

% plot a grand summary?
if visualize > 0
    showDifferenceSummary(matchInfo);
end


% Scan paths for expected parts, stripping off the given root path.
%   expect: root/script/renderer/image.mat
function [relative, image, script, renderer] = scanDataPaths(paths, root)
n = numel(paths);
relative = cell(1, n);
image = cell(1, n);
script = cell(1, n);
renderer = cell(1, n);
rootLength = numel(root);
for ii = 1:n
    % bite off the relative path after the root path
    relative{ii} = paths{ii}(rootLength+2:end);
    
    % bite off the file name as the image name
    [filePath, fileBase, fileExt] = fileparts(paths{ii});
    image{ii} = [fileBase fileExt];

    % take the script name as the second-to-last subfolder in the path
    seps = find(filesep() == filePath);
    script{ii} = filePath(seps(end-1)+1:seps(end)-1);
    
    % take the renderer as the last subfolder in the path
    renderer{ii} = filePath(seps(end)+1:end);
end


% Show sRGB images and difference image, plot difference histogram.
function showDifferenceImage(info, A, B, difference)
toneMapFactor = 0;

% make SRGB images
sRGBA = MultispectralToSRGB(A, info.samplingA, toneMapFactor, true);
sRGBB = MultispectralToSRGB(B, info.samplingB, toneMapFactor, true);
sRGBDiff = MultispectralToSRGB(difference, info.samplingA, toneMapFactor, false);

% show images in a new figure
f = figure('Name', info.relativeA);

ax = subplot(2, 2, 2, 'Parent', f);
imshow(uint8(sRGBA), 'Parent', ax);
title(ax, ['A: ' info.outputRootA]);

ax = subplot(2, 2, 3, 'Parent', f);
imshow(uint8(sRGBB), 'Parent', ax);
title(ax, ['B: ' info.outputRootB]);

ax = subplot(2, 2, 1, 'Parent', f);
imshow(uint8(sRGBDiff), 'Parent', ax);
title(ax, 'Difference (A - B)');

ax = subplot(2, 2, 4, ...
    'Parent', f, ...
    'XLim', [min(info.diffHistCenters), max(info.diffHistCenters)], ...
    'YLim', [0, max(info.diffHistCounts)]);
line(info.diffHistCenters, info.diffHistCounts, ...
    'Parent', ax, ...
    'LineStyle', 'none', ...
    'Marker', '+');
title(ax, 'Difference Histogram');

drawnow();


% Show a summary of all difference images.
function showDifferenceSummary(info)
f = figure('Name', 'Output Differences');
names = {info.relativeA};
maxes = [info.maxDiff];
mins = [info.minDiff];
n = numel(names);

ax = axes( ...
    'Parent', f, ...
    'YLim', [0 n+1], ...
    'YTick', 1:n, ...
    'YTickLabel', names);
line(mins, 1:n, ...
    'Parent', ax, ...
    'LineStyle', 'none', ...
    'Marker', 'o', ...
    'Color', [0 0 1])
line(maxes, 1:n, ...
    'Parent', ax, ...
    'LineStyle', 'none', ...
    'Marker', '+', ...
    'Color', [1 0 0])
title(ax, sprintf('A: %s, B: %s', ...
    info(1).outputRootA, info(1).outputRootB));
xlabel(ax, 'Multispectral pixel components A - B');
legend(ax, 'difference min', 'difference max', 'Location', 'northeast');